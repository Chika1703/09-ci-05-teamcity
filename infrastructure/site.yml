---
- name: Get Nexus installed
  hosts: nexus
  become: true
  pre_tasks:
    - name: Create Nexus group
      group:
        name: "{{ nexus_user_group }}"
        state: present

    - name: Create Nexus user
      user:
        name: "{{ nexus_user_name }}"

    - name: Install JDK 8
      package:
        name: openjdk-8-jdk
        state: present

  tasks:
    - name: Create Nexus directories
      file:
        group: "{{ nexus_user_group }}"
        owner: "{{ nexus_user_name }}"
        path: "{{ item }}"
        state: directory
      loop:
        - "{{ nexus_directory_log }}"
        - "{{ nexus_directory_data }}"
        - "{{ nexus_directory_data }}/etc"
        - "{{ nexus_directory_package }}"
        - "{{ nexus_directory_tmp }}"

    - name: Download Nexus
      become_user: "{{ nexus_user_name }}"
      get_url:
        dest: "{{ nexus_directory_package }}/nexus-{{ nexus_version }}.tar.gz"
        url: "{{ nexus_download_url }}/nexus-{{ nexus_version }}-unix.tar.gz"

    - name: Unpack Nexus
      become_user: "{{ nexus_user_name }}"
      unarchive:
        copy: no
        creates: "{{ nexus_directory_package }}/nexus-{{ nexus_version }}"
        dest: "{{ nexus_directory_package }}"
        src: "{{ nexus_directory_package }}/nexus-{{ nexus_version }}.tar.gz"

    - name: Link to Nexus Directory
      become_user: "{{ nexus_user_name }}"
      file:
        dest: "{{ nexus_directory_home }}"
        src: "{{ nexus_directory_package }}/nexus-{{ nexus_version }}"
        state: link

    - name: Add NEXUS_HOME for Nexus user
      become_user: "{{ nexus_user_name }}"
      lineinfile:
        create: yes
        dest: "/home/{{ nexus_user_name }}/.bashrc"
        insertafter: EOF
        line: "export NEXUS_HOME={{ nexus_directory_home }}"

    - name: Add run_as_user to Nexus.rc
      become_user: "{{ nexus_user_name }}"
      lineinfile:
        create: yes
        dest: "{{ nexus_directory_home }}/bin/nexus.rc"
        insertafter: EOF
        line: "run_as_user=\"{{ nexus_user_name }}\""
        regexp: "^run_as_user"

    - name: Raise nofile limit for Nexus user
      pam_limits:
        domain: "{{ nexus_user_name }}"
        limit_type: "-"
        limit_item: nofile
        value: "{{ nexus_ulimit }}"

    - name: Create Nexus service for SystemD
      template:
        dest: /lib/systemd/system/nexus.service
        mode: 0644
        src: nexus.systemd.j2

    - name: Ensure Nexus service is enabled for SystemD
      systemd:
        daemon_reload: yes
        enabled: yes
        name: nexus
      when:
        - nexus_service_enabled

    - name: Create Nexus vmoptions
      become_user: "{{ nexus_user_name }}"
      template:
        dest: "{{ nexus_directory_home }}/bin/nexus.vmoptions"
        src: nexus.vmoptions.j2
      register: nexus_config_changed

    - name: Create Nexus properties
      become_user: "{{ nexus_user_name }}"
      template:
        dest: "{{ nexus_directory_data }}/etc/nexus.properties"
        src: nexus.properties.j2
      register: nexus_config_changed

    - name: Lower Nexus disk space threshold
      lineinfile:
        backrefs: yes
        dest: "{{ nexus_directory_home }}/etc/karaf/system.properties"
        insertafter: EOF
        line: "storage.diskCache.diskFreeSpaceLimit={{ nexus_configuration_disk_free_space_limit }}"
        regexp: ^storage\.diskCache\.diskFreeSpaceLimit
      when: nexus_configuration_disk_free_space_limit is not none
      register: nexus_config_changed

    - name: Start Nexus service if enabled
      service:
        enabled: yes
        name: nexus
        state: started
      when:
        - nexus_service_start_on_boot
        - not nexus_config_changed.changed
      tags:
        - skip_ansible_lint

    - name: Ensure Nexus service is restarted
      service:
        name: nexus
        state: restarted
      when:
        - nexus_service_start_on_boot
        - nexus_config_changed.changed
      tags:
        - skip_ansible_lint

    - name: Wait for Nexus port if started
      wait_for:
        port: "{{ nexus_port }}"
        state: started
        timeout: "{{ nexus_port_check_timeout }}"
      when:
        - nexus_service_start_on_boot
